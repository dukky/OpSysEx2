

#include <linux/kernel.h>
#include <linux/module.h>
#include <linux/fs.h>
#include <asm/uaccess.h>	/* for put_user */
#include <charDeviceDriver.h>
#include "ioctl.h"
#include <linux/kfifo.h>

MODULE_LICENSE("GPL");

/* 
 * This function is called whenever a process tries to do an ioctl on our
 * device file. We get two extra parameters (additional to the inode and file
 * structures, which all device functions get): the number of the ioctl called
 * and the parameter given to the ioctl function.
 *
 * If the ioctl is write or read/write (meaning output is returned to the
 * calling process), the ioctl call returns the output of this function.
 *
 */


DEFINE_MUTEX  (devLock);


static DECLARE_KFIFO(messagebuffer, char, INITIAL_FIFO_SIZE);

static DECLARE_KFIFO(messagesize, int, INITIAL_FIFO_SIZE);

static int counter = 0;

static long device_ioctl(struct file *file,	/* see include/linux/fs.h */
		 unsigned int ioctl_num,	/* number and param for ioctl */
		 unsigned long ioctl_param)
{

	/* 
	 * Switch according to the ioctl called 
	 */
	if (ioctl_num == RESET_COUNTER) {
	    counter = 0; 
	    /* 	    return 0; */
	    return 5; /* can pass integer as return value */
	}

	else {
	    /* no operation defined - return failure */
	    return -EINVAL;

	}
}


/*
 * This function is called when the module is loaded
 */
int init_module(void)
{
  //  int ret;
   // int ret2;
    Major = register_chrdev(0, DEVICE_NAME, &fops);


	if (Major < 0) {
	  printk(KERN_ALERT "Registering char device failed with %d\n", Major);
	  return Major;
	}

	printk(KERN_INFO "I was assigned major number %d. To talk to\n", Major);
	printk(KERN_INFO "the driver, create a dev file with\n");
	printk(KERN_INFO "'mknod /dev/%s c %d 0'.\n", DEVICE_NAME, Major);
	printk(KERN_INFO "Try various minor numbers. Try to cat and echo to\n");
	printk(KERN_INFO "the device file.\n");
	printk(KERN_INFO "Remove the device file and module when done.\n");
    
    INIT_KFIFO(messagebuffer);
    INIT_KFIFO(messagesize);
//    ret = kfifo_alloc(&messagebuffer, INITIAL_FIFO_SIZE, GFP_KERNEL);
//    if(ret != 0) {
//        printk(KERN_ERR "Error during kfifo_alloc\n");
//        return ret;
//   }
//    ret2 = kfifo_alloc(&messagesize, INITIAL_FIFO_SIZE, GFP_KERNEL);
//    if(ret2 != 0) {
//        printk(KERN_ERR "Error during kfifo_alloc\n");
//       return ret2;
//    }
    
	return SUCCESS;
}

/*
 * This function is called when the module is unloaded
 */
void cleanup_module(void)
{
	/*  Unregister the device */
    kfifo_free(&messagebuffer);
    kfifo_free(&messagesize);
	unregister_chrdev(Major, DEVICE_NAME);
}

/*
 * Methods
 */

/* 
 * Called when a process tries to open the device file, like
 * "cat /dev/mycharfile"
 */
static int device_open(struct inode *inode, struct file *file)
{
    
    mutex_lock (&devLock);
    if (Device_Open) {
	    mutex_unlock (&devLock);
	    return -EBUSY;
    }
    Device_Open++;
    //mutex_unlock (&devLock);
    //sprintf(msg, "I already told you %d times Hello world!\n", counter++);
    //msg_Ptr = msg;
    try_module_get(THIS_MODULE);
    
    return SUCCESS;
}

/* Called when a process closes the device file. */
static int device_release(struct inode *inode, struct file *file)
{
    mutex_lock (&devLock);
	Device_Open--;		/* We're now ready for our next caller */
	mutex_unlock (&devLock);
	/* 
	 * Decrement the usage count, or else once you opened the file, you'll
	 * never get get rid of the module. 
	 */
	module_put(THIS_MODULE);

	return 0;
}

/* 
 * Called when a process, which already opened the dev file, attempts to
 * read from it.
 */
static ssize_t device_read(struct file *filp,	/* see include/linux/fs.h   */
			   char *buffer,	/* buffer to fill with data */
			   size_t length,	/* length of the buffer     */
			   loff_t * offset)
{
    int toRead[1];
    int ret;
    int bytesRead;
    mutex_lock(&devLock);

   
    if(!kfifo_is_empty(&messagebuffer)) {
        kfifo_out(&messagesize, &toRead, 1);
        ret = kfifo_to_user(&messagebuffer, buffer, toRead[0], &bytesRead);   cl
    } else {
        return -EAGAIN;    
    }
    mutex_unlock(&devLock);
	
	return bytesRead;
}

/* Called when a process writes to dev file: echo "hi" > /dev/hello  */
static ssize_t
device_write(struct file *filp, const char *buff, size_t len, loff_t * off)
{
    kfifo_from_user
	printk(KERN_ALERT "Sorry, this operation isn't supported.\n");
	return -EINVAL;
}

